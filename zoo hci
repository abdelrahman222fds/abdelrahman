using System;
using System.Drawing;
using System.Windows.Forms;
using System.ComponentModel;
using System.Collections.Generic;
using System.Collections;
using System.Threading;
using TUIO;
using System.IO;
using System.Drawing.Drawing2D;

public class TuioDemo : Form, TuioListener
{
    int flag = 1, ctgame1 = 0, ctgame2 = 0,ctgame2left=0, game1 = 0, game2 = 0, game3 = 0, tmct = 0,startgame2=0,game2next=0;
    private TuioClient client;
    private Dictionary<long, TuioObject> objectList;
    private Dictionary<long, TuioCursor> cursorList;
    private Dictionary<long, TuioBlob> blobList;

    public static int width, height;
    private int window_width = 640;
    private int window_height = 480;
    private int window_left = 0;
    private int window_top = 0;
    private int screen_width = Screen.PrimaryScreen.Bounds.Width;
    private int screen_height = Screen.PrimaryScreen.Bounds.Height;

    private bool fullscreen;
    private bool verbose;

    Font font = new Font("Arial", 10.0f);
    SolidBrush fntBrush = new SolidBrush(Color.White);
    SolidBrush bgrBrush = new SolidBrush(Color.FromArgb(0, 0, 64));
    SolidBrush curBrush = new SolidBrush(Color.FromArgb(192, 0, 192));
    SolidBrush objBrush = new SolidBrush(Color.FromArgb(64, 0, 0));
    SolidBrush blbBrush = new SolidBrush(Color.FromArgb(64, 64, 64));
    Pen curPen = new Pen(new SolidBrush(Color.Blue), 1);

    public TuioDemo(int port)
    {
        verbose = false;
        fullscreen = false;
        width = window_width;
        height = window_height;

        this.ClientSize = new System.Drawing.Size(width, height);
        this.Name = "TuioDemo";
        this.Text = "TuioDemo";

        this.Closing += new CancelEventHandler(Form_Closing);
        this.KeyDown += new KeyEventHandler(Form_KeyDown);

        this.SetStyle(ControlStyles.AllPaintingInWmPaint |
                        ControlStyles.UserPaint |
                        ControlStyles.DoubleBuffer, true);

        objectList = new Dictionary<long, TuioObject>(128);
        cursorList = new Dictionary<long, TuioCursor>(128);
        blobList = new Dictionary<long, TuioBlob>(128);

        client = new TuioClient(port);
        client.addTuioListener(this);
        this.WindowState = FormWindowState.Maximized;
        client.connect();
    }
    public void refresh(TuioTime frameTime)
    {
        // You might need to invoke UI updates from here
        // Make sure this is executed in the UI thread
        this.Invoke((MethodInvoker)delegate
        {
            // Invalidate the form to cause a redraw
            this.Invalidate();
        });
    }
    private void Form_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyData == Keys.F1)
        {
            if (!fullscreen)
            {
                width = screen_width;
                height = screen_height;

                window_left = this.Left;
                window_top = this.Top;

                this.FormBorderStyle = FormBorderStyle.None;
                this.Left = 0;
                this.Top = 0;
                this.Width = screen_width;
                this.Height = screen_height;

                fullscreen = true;
            }
            else
            {
                width = window_width;
                height = window_height;

                this.FormBorderStyle = FormBorderStyle.Sizable;
                this.Left = window_left;
                this.Top = window_top;
                this.Width = window_width;
                this.Height = window_height;

                fullscreen = false;
            }
        }
        else if (e.KeyData == Keys.Escape)
        {
            this.Close();
        }
        else if (e.KeyData == Keys.V)
        {
            verbose = !verbose;
        }
    }

    private void Form_Closing(object sender, CancelEventArgs e)
    {
        client.removeTuioListener(this);
        client.disconnect();
        Environment.Exit(0);
    }

    public void addTuioObject(TuioObject o)
    {
        lock (objectList)
        {
            objectList.Add(o.SessionID, o);
        }
        if (verbose) Console.WriteLine("add obj " + o.SymbolID + " (" + o.SessionID + ") " + o.X + " " + o.Y + " " + o.Angle);
    }

    public void updateTuioObject(TuioObject o)
    {
        if (verbose) Console.WriteLine("set obj " + o.SymbolID + " " + o.SessionID + " " + o.X + " " + o.Y + " " + o.MotionSpeed + " " + o.RotationSpeed + " " + o.MotionAccel + " " + o.RotationAccel);
    }

    public void removeTuioObject(TuioObject o)
    {
        lock (objectList)
        {
            objectList.Remove(o.SessionID);
        }
        if (verbose) Console.WriteLine("del obj " + o.SymbolID + " (" + o.SessionID + ")");
    }

    public void addTuioCursor(TuioCursor c)
    {
        lock (cursorList)
        {
            cursorList.Add(c.SessionID, c);
        }
        if (verbose) Console.WriteLine("add cur " + c.CursorID + " (" + c.SessionID + ") " + c.X + " " + c.Y);
    }

    public void updateTuioCursor(TuioCursor c)
    {
        if (verbose) Console.WriteLine("set cur " + c.CursorID + " (" + c.SessionID + ") " + c.X + " " + c.Y + " " + c.MotionSpeed + " " + c.MotionAccel);
    }

    public void removeTuioCursor(TuioCursor c)
    {
        lock (cursorList)
        {
            cursorList.Remove(c.SessionID);
        }
        if (verbose) Console.WriteLine("del cur " + c.CursorID + " (" + c.SessionID + ")");
    }

    public void addTuioBlob(TuioBlob b)
    {
        lock (blobList)
        {
            blobList.Add(b.SessionID, b);
        }
        if (verbose) Console.WriteLine("add blb " + b.BlobID + " (" + b.SessionID + ") " + b.X + " " + b.Y + " " + b.Angle + " " + b.Width + " " + b.Height + " " + b.Area);
    }

    public void updateTuioBlob(TuioBlob b)
    {
        if (verbose) Console.WriteLine("set blb " + b.BlobID + " (" + b.SessionID + ") " + b.X + " " + b.Y + " " + b.Angle + " " + b.Width + " " + b.Height + " " + b.Area + " " + b.MotionSpeed + " " + b.RotationSpeed + " " + b.MotionAccel + " " + b.RotationAccel);
    }

    public void removeTuioBlob(TuioBlob b)
    {
        lock (blobList)
        {
            blobList.Remove(b.SessionID);
        }
        if (verbose) Console.WriteLine("del blb " + b.BlobID + " (" + b.SessionID + ")");
    }
    public void designgame1(Graphics g)
    {
        SolidBrush b = new SolidBrush(Color.White);
        Rectangle rect1 = new Rectangle(200, 300, ClientSize.Width-600, 50);
        Rectangle rect2 = new Rectangle(200, 650, ClientSize.Width-600, 50);
        g.FillRectangle(b, rect1);
        g.FillRectangle(b, rect2);
    }
    public void designgame2(Graphics g)
    {

        SolidBrush b = new SolidBrush(Color.White);
        Rectangle rect3 = new Rectangle(ClientSize.Width - 700, 200, 10, 200);
        Rectangle rect4 = new Rectangle(ClientSize.Width - 400, 200, 10, 600);
        Rectangle rect1 = new Rectangle(200, 300, ClientSize.Width - 900, 30);
        Rectangle rect2 = new Rectangle(200, 650, ClientSize.Width - 600, 30);
        g.FillRectangle(b, rect1);
        g.FillRectangle(b, rect2);
        g.FillRectangle(b,rect3 );
        g.FillRectangle(b, rect4);
    }
    public void finishgame1(int ox,int oy)
    {
        if(oy<300&&ox< ClientSize.Width - 700 || oy>600&&ox<ClientSize.Width-700)
        {
            ctgame1++;
            if (ctgame1 == 1)
                MessageBox.Show("game over");
        }
    }
    public void finishgame2(int ox,int oy)
    {
        int fx = ClientSize.Width - 700, fy = 200, finish = 0, next = 0, stop = 0 ;
        int fx2 = ClientSize.Width - 400;
        if (ox >= fx && ox <= fx2)
            if (oy <= fy)
            {
                tmct ++;
                if (tmct == 1)
                {
                    MessageBox.Show("STICK TO LINES DO GO OVER IT TO WIN!");
                }
                startgame2 = 1;
               // MessageBox.Show(startgame2 + "game2"+tmct);
            }
        if(startgame2==1&&tmct>=1)
        {
            if (ox > fx2 || ox < fx)
            {
                ctgame2left  ++;
                if (ctgame2left == 1||ctgame2==2)
                    MessageBox.Show("-1 point! stick to the lines");
                if (ctgame2left == 3)
                    MessageBox.Show("game over");
                finish = 1;
                startgame2 = 0;
            }
            if (oy >= 300)
                game2next = 1;
        }
        if(game2next==1)
        {
            stop = 1;
            if (oy < 300 && ox < ClientSize.Width - 700 || oy > 600 && ox < ClientSize.Width - 700)
            {
                ctgame2++;
                if (ctgame2 == 1)
                    MessageBox.Show("game over222");
            }
        }
    }
    protected override void OnPaintBackground(PaintEventArgs pevent)
    {
        //int flag = 1;
        Graphics g = pevent.Graphics;
        g.FillRectangle(bgrBrush, new Rectangle(0, 0, width, height));

        if (cursorList.Count > 0)
        {
            lock (cursorList)
            {
                foreach (TuioCursor tcur in cursorList.Values)
                {
                    List<TuioPoint> path = tcur.Path;
                    TuioPoint current_point = path[0];

                    for (int i = 0; i < path.Count; i++)
                    {
                        TuioPoint next_point = path[i];
                        g.DrawLine(curPen, current_point.getScreenX(width), current_point.getScreenY(height), next_point.getScreenX(width), next_point.getScreenY(height));
                        current_point = next_point;
                    }
                    g.FillEllipse(curBrush, current_point.getScreenX(width) - height / 100, current_point.getScreenY(height) - height / 100, height / 50, height / 50);
                    g.DrawString(tcur.CursorID + "", font, fntBrush, new PointF(tcur.getScreenX(width) - 10, tcur.getScreenY(height) - 10));
                }
            }
        }

        if (objectList.Count > 0)
        {
            lock (objectList)
            {
                foreach (TuioObject tobj in objectList.Values)
                {
                    int ox = tobj.getScreenX(width);
                    int oy = tobj.getScreenY(height);
                    int size = height / 10;
                    string objectImagePath = "";
                    string backgroundImagePath = "";
                    string caveImagePath = "";
                    string sleepImagePath = "";
                    switch (tobj.SymbolID)
                    {
                        
                        case 1:
                            objectImagePath = Path.Combine(Environment.CurrentDirectory, "bear.bmp");
                            caveImagePath = Path.Combine(Environment.CurrentDirectory, "cave.bmp");
                            backgroundImagePath = Path.Combine(Environment.CurrentDirectory, "main.bmp");
                            sleepImagePath = Path.Combine(Environment.CurrentDirectory, "sleep.bmp");
                            game1 = 1;
                            break;
                        case 2:
                            objectImagePath = Path.Combine(Environment.CurrentDirectory, "lion.bmp");
                            caveImagePath = Path.Combine(Environment.CurrentDirectory, "lioncave.bmp");
                            backgroundImagePath = Path.Combine(Environment.CurrentDirectory, "main.bmp");
                            sleepImagePath = Path.Combine(Environment.CurrentDirectory, "lionsleep.bmp");
                            game2 = 1;
                            break;
                        case 0:
                            objectImagePath = Path.Combine(Environment.CurrentDirectory, "pngegg_3.png");
                            backgroundImagePath = Path.Combine(Environment.CurrentDirectory, "bg3.jpg");
                            break;
                        default:
                            g.FillRectangle(objBrush, new Rectangle(ox - size / 2, oy - size / 2, size, size));
                            g.DrawString(tobj.SymbolID + "", font, fntBrush, new PointF(ox - 10, oy - 10));
                            continue;
                    }

                    if (File.Exists(backgroundImagePath))
                    {
                        using (Image bgImage = Image.FromFile(backgroundImagePath))
                        {
                            g.DrawImage(bgImage, new Rectangle(0, 0, width, height));
                        }
                    }
                    else
                    {
                        Console.WriteLine($"Background image not found: {backgroundImagePath}");
                    }

                    if (File.Exists(objectImagePath))
                    {
                        int ct=0;
                        using (Image objectImage = Image.FromFile(objectImagePath))
                        {
                            if (flag == 1)
                            {
                                GraphicsState state = g.Save();
                                g.TranslateTransform(ox, oy);
                                g.RotateTransform((float)(tobj.Angle / Math.PI * 180.0f));
                                g.TranslateTransform(-ox, -oy);
                                g.DrawImage(objectImage, new Rectangle(ox - size, oy - size, size , size ));
                                g.Restore(state);
                                if(game1==1)
                                {
                                    designgame1(g);
                                    finishgame1(ox, oy);
                                    if(ctgame1==1)
                                        ctgame1 = 0;
                                }
                                if(game2==1)
                                {
                                    designgame2(g);
                                    finishgame2(ox, oy);
                                    if(ctgame2==1)
                                        ctgame2 = 0;
                                }
                               // designgame1(g);
                            }
                        }
                        using (Image caveImage = Image.FromFile(caveImagePath))
                        {
                            GraphicsState state = g.Save();
                            g.DrawImage(caveImage, new Rectangle(50,300, size*4, size*4));
                            g.Restore(state);
                        }
                        if(ox<=200)
                        {
                            //MessageBox.Show("GOODGAME");
                            flag = 0;
                            ct++;
                            if (ct == 0)
                                MessageBox.Show("GOODGAME");
                        }
                        if(flag==0)
                        {
                            using (Image sleepImage = Image.FromFile(sleepImagePath))
                            {
                                GraphicsState state = g.Save();
                                g.DrawImage(sleepImage, new Rectangle(50, 300, size * 4, size * 4));
                                g.Restore(state);
                            }
                            
                        }
                    }
                    else
                    {
                        Console.WriteLine($"Object image not found: {objectImagePath}");
                        g.FillRectangle(objBrush, new Rectangle(ox - size / 2, oy - size / 2, size, size));
                    }
                }
            }
        }

        if (blobList.Count > 0)
        {
            lock (blobList)
            {
                foreach (TuioBlob tblb in blobList.Values)
                {
                    int bx = tblb.getScreenX(width);
                    int by = tblb.getScreenY(height);
                    float bw = tblb.Width * width;
                    float bh = tblb.Height * height;

                    g.TranslateTransform(bx, by);
                    g.RotateTransform((float)(tblb.Angle / Math.PI * 180.0f));
                    g.TranslateTransform(-bx, -by);

                    g.FillEllipse(blbBrush, bx - bw / 2, by - bh / 2, bw, bh);

                    g.TranslateTransform(bx, by);
                    g.RotateTransform(-1 * (float)(tblb.Angle / Math.PI * 180.0f));
                    g.TranslateTransform(-bx, -by);

                    g.DrawString(tblb.BlobID + "", font, fntBrush, new PointF(bx, by));
                }
            }
        }
    }

    public static void Main(String[] argv)
    {
        int port = 0;
        switch (argv.Length)
        {
            case 1:
                port = int.Parse(argv[0], null);
                if (port == 0) goto default;
                break;
            case 0:
                port = 3333;
                break;
            default:
                Console.WriteLine("usage: mono TuioDemo [port]");
                Environment.Exit(0);
                break;
        }

        TuioDemo app = new TuioDemo(port);
        Application.Run(app);
    }
}
